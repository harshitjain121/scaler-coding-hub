You are starving and you want to eat food as 
quickly as possible. You want to find the
shortest path to arrive at any food cell.

You are given an m x n character matrix, grid,
of these different types of cells:

'*' is your location. There is exactly one '*' 
cell.

'#' is a food cell. There may be multiple 
food cells.

'O' is free space, and you can travel through these cells.

'X' is an obstacle, and you cannot travel through these cells.

You can travel to any adjacent cell north, east, south, or west of your current location if there is not an obstacle.

Return the length of the shortest path for you to reach any food cell. If there is no path for you to reach food, return -1.

[[“X”,”X”,”X”,”X”,”X”,”X”],
 [“X”,”*”,”X”,”X”,”O”,”X”],
 [“X”,”X”,”X”,”#”,”#”,”X”],
 [“X”,”X”,”X”,”X”,”X”,”X”]]
 
 Output :: 3
 
 Queue -> (1,1)
 level =0
 
 (1,1) -> [(1,2),(2,1)]
 level =1 
 
 (1,2), (2,1) -> [(2,2),(1,3)]
 level =2
 
 (2,2),(1,3)
 
 [[“X”,”X”,”X”,”X”,”X”],
  [“X”,”*”,”X”,”O”,”X”],
  [“X”,”O”,”X”,”#”,”X”],
  [“X”,”X”,”X”,”X”,”X”]]
  
Output :: -1

O(V+E) = O(m*n + 4*m*n)
= O(m*n)

V= m*n
E = 4*m*n

//should i make a class{ row col  distance}

//imp: complete the code
public static int findShortestPath(char[][] grid){
    // queue // use pair ?
    Queue<int[]> queue = new LinkedList<int[]>();
   
    for(int i=0; i<grid.length(); i++){
        for(int j=0; j<grid[0].length(); j++){
            if(grid[i][j] == '*'){
                queue.offer(new int[]{i,j});
                break;
            }
        }
    }

    int[][] dir = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};

    int level=0;
    while(!queue.isEmpty()){
        int size = queue.size();
        level++;
        while(size>0){
            int[] curr = queue.pop();
            for(int i=0;i<4;i++){
                int curx= curr[0]+dir[i][0];
                int cury= curr[1]+dir[i][1];
                //validation
                if(curx>=0 && curx<grid.length &&
                cury>=0 && cury<grid[0].length){
                if(grid[curx][cury]=='#'){
                    return level;
                }
                if(grid[curx][cury]=='O'){
                    queue.offer(new int[]{curx,cury});
                    grid[curx][cury]=='X';
                }
                }
            }
            size--;
        }
    }
    return -1;
}


}






//note:  DFS APPROACH - GET AN IDEA - COPY FROM LEETCODE

// class Solution {
//     int m, n;
//     int[] DIR = new int[]{0, 1, 0, -1, 0};
//     public int maxAreaOfIsland(int[][] grid) {
//         m = grid.length;
//         n = grid[0].length;
//         int ans = 0;
//         for (int r = 0; r < m; r++) {
//             for (int c = 0; c < n; c++) {
//                 ans = Math.max(ans, dfs(grid, r, c));
//             }
//         }
//         return ans;
//     }
//     int dfs(int[][] grid, int r, int c) {
//         if (r < 0 || r == m || c < 0 || c == n || grid[r][c] == 0) return 0;
//         int ans = 1;
//         grid[r][c] = 0; // Mark this square as visited
//         for (int i = 0; i < 4; i++)
//             ans += dfs(grid, r + DIR[i], c + DIR[i+1]);
//         return ans;
//     }
// }




//review : another approach of DFS IN  MATRIX

// void dfs(int[][] grid, int row, int column) {
//     if(row < 0 || row > grid.length -1 || column < 0 || column > grid[0].length -1 || grid[row][column] == 0 || grid[row][column] == -1) return;
    
//     grid[row][column] = -1;
//     dfs(grid, row+1, column);
//     dfs(grid, row-1, column);
//     dfs(grid, row, column+1);
//     dfs(grid, row, column-1);
// }