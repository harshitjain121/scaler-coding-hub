public class Solution {
    public ArrayList<Integer> solve(ArrayList<String> A, String B) {
        ArrayList<Integer> result = new ArrayList<Integer>();
        result.add(firstOccurrence_binarySearch(A, B));
        result.add(lastOccurrence_binarySearch(A,B));
        return result;
    }

    public boolean matchPrefix(String str, String pattern){
        if(str.length() < pattern.length())
            return false;
        return (pattern.equals(str.substring(0, pattern.length())) );
    }

    public int firstOccurrence_binarySearch(ArrayList<String> A, String key){
       int s = 0;
        int e = A.size()-1;
        int mid = s + (e-s)/2;
        int firstMatch = -1;

        while (s<=e) {
            //prefix found
            System.out.println("MID : "+ mid);
            if (matchPrefix(A.get(mid), key)) {
                firstMatch = mid;
                // for first occurrence - go to left part
                e = mid - 1;
            } else if (key.compareTo(A.get(mid)) > 0) {
                // go to right part
                s = mid + 1;
            } else {
                // go to left part - key < arr[mid]
                e = mid - 1;
            }
            mid = s + (e - s) / 2;
        }
        return firstMatch;
    }

    public int lastOccurrence_binarySearch(ArrayList<String> A, String key){
        int s = 0;
        int e = A.size()-1;
        int mid = s + (e-s)/2;
        int lastMatch = -1;

        while (s<=e) {
            //prefix found
            if (matchPrefix(A.get(mid), key)) {
                lastMatch = mid;
                // for last occurrence - go to left part
                s = mid + 1;
            } else if (key.compareTo(A.get(mid)) > 0) {
                // go to right part
                s = mid + 1;
            } else {
                // go to left part - key < arr[mid]
                e = mid - 1;
            }
            mid = s + (e - s) / 2;
        }
        return lastMatch;
    }
}
